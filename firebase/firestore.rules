rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== Helper Functions =====
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(conversation) {
      return request.auth.uid in conversation.data.participants;
    }
    
    function isValidUser() {
      return request.auth != null && 
             request.resource.data.keys().hasAll(['displayName', 'email', 'createdAt']) &&
             request.resource.data.displayName is string &&
             request.resource.data.displayName.size() > 0;
    }
    
    function isValidConversation() {
      let hasRequiredFields = request.resource.data.keys().hasAll(['type', 'participants', 'updatedAt', 'createdAt']);
      let validParticipants = request.resource.data.participants is list &&
                               request.resource.data.participants.size() >= 2 &&
                               request.resource.data.participants.size() <= 50 &&
                               request.auth.uid in request.resource.data.participants;
      
      // For groups: must have name and groupAdmins
      let validGroupFields = request.resource.data.type != 'GROUP' ||
                             (request.resource.data.keys().hasAll(['name', 'groupAdmins']) &&
                              request.resource.data.groupAdmins is list &&
                              request.resource.data.groupAdmins.size() > 0 &&
                              request.auth.uid in request.resource.data.groupAdmins);
      
      return hasRequiredFields && validParticipants && validGroupFields;
    }
    
    function isGroupAdmin(conversation) {
      return conversation.data.type == 'GROUP' &&
             'groupAdmins' in conversation.data &&
             request.auth.uid in conversation.data.groupAdmins;
    }
    
    function isValidMessage() {
      // Required fields for all messages
      let hasRequiredFields = request.resource.data.keys().hasAll(['conversationId', 'senderId', 'type', 'timestamp', 'status']);
      let isSender = request.resource.data.senderId == request.auth.uid;
      
      // Text validation (optional field, but if present must be valid)
      let textValid = !request.resource.data.keys().hasAny(['text']) || 
                      (request.resource.data.text is string && request.resource.data.text.size() <= 10000);
      
      return hasRequiredFields && isSender && textValid;
    }
    
    // ===== Users Collection =====
    
    match /users/{userId} {
      // Anyone authenticated can read any user profile (for display and search)
      allow read: if isAuthenticated();
      
      // Anyone authenticated can list/query users (for search functionality)
      allow list: if isAuthenticated();
      
      // Users can create their own profile
      allow create: if isOwner(userId) && isValidUser();
      
      // Users can only update their own profile
      allow update: if isOwner(userId);
      
      // Users can delete their own profile
      allow delete: if isOwner(userId);
      
      // FCM tokens subcollection
      match /tokens/{tokenId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // ===== Conversations Collection =====
    
    match /conversations/{conversationId} {
      // Users can read conversations where they are participants
      // For list queries: allow if user is participant (Firestore filters client-side)
      allow read: if isAuthenticated() && 
                     (resource == null || request.auth.uid in resource.data.participants);
      
      // Users can create conversations if they are a participant
      allow create: if isAuthenticated() && isValidConversation();
      
      // Participants can update conversations (for lastMessage, etc.)
      // Group admins can update group settings (name, icon, add/remove participants)
      // Participants can update nicknames (setting their own nickname)
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants &&
                       (
                         // Regular updates (lastMessage, updatedAt, nicknames)
                         (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['name', 'iconUrl', 'participants', 'groupAdmins'])) ||
                         // Admin updates (group settings)
                         (resource.data.type == 'GROUP' && isGroupAdmin(resource))
                       );
      
      // Only participants can delete conversation
      allow delete: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants;
      
      // ===== Messages Subcollection =====
      
      match /messages/{messageId} {
        // Participants of the conversation can read messages
        allow read: if isAuthenticated() &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Participants can create messages (must be sender)
        allow create: if isAuthenticated() &&
                         isValidMessage() &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Participants can update messages (for read receipts, status changes)
        allow update: if isAuthenticated() &&
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Sender or participants can delete messages
        allow delete: if isAuthenticated() &&
                         (request.auth.uid == resource.data.senderId ||
                          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
      }
      
      // ===== Typing Indicators Subcollection =====
      
      match /typing/{userId} {
        // Participants can read typing indicators
        allow read: if isAuthenticated() &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Users can write their own typing indicator if they are participants
        allow write: if isAuthenticated() &&
                        isOwner(userId) &&
                        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // ===== AI Translations Collection =====
    
    match /translations/{translationId} {
      // All authenticated users can read translations (shared cache)
      // Translations are not sensitive - they're just language conversions
      allow read: if isAuthenticated();
      
      // Only Cloud Functions can write translations (enforced server-side)
      // Client creates translations by calling translateMessage Cloud Function
      allow create, update, delete: if false;
    }
    
    // ===== Rate Limiting Collection (Internal) =====
    
    match /rateLimits/{userId} {
      // Only accessible by Cloud Functions for rate limiting
      allow read, write: if false;
      
      match /features/{featureName} {
        allow read, write: if false;
      }
    }
    
    // ===== Deny All Other Access =====
    
    // Explicitly deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
